pipeline {
    agent {
        node {
            label 'maven-server'
        }
    }
    
    environment {
        Repo = 'https://github.com/Vamsi-PrimeSoft/pipeline.git'
    }
    
    tools {
        maven 'mvn'
    }
    
    stages {
        stage('Git Clone') {
            steps {
                echo "Using repository URL: ${Repo}"
                git credentialsId: 'ps', url: "${Repo}"
            }
        }
        
        stage('Build') {
            steps {
                script {		
                			def pom = readMavenPom file: 'pom.xml'
					def version = pom.version 
					def majorVersion = version.tokenize('.')[0] 
					def minorVersion = version.tokenize('.')[1] 
					def patchVersion = version.tokenize('.')[2].replace('-SNAPSHOT','') 
					BUILD_VERSION = "module-a-${majorVersion}.${minorVersion}.${patchVersion}-${GIT_COMMIT[0..6]}-${BUILD_NUMBER}" 
					sh "echo 'Major version: ${majorVersion}'" 
					sh "echo 'Minor version: ${minorVersion}'"
					sh "echo 'patchVersion: ${patchVersion}'" 
					sh "echo 'Build Number: ${BUILD_NUMBER}'"
					sh "echo 'Build Version: ${BUILD_VERSION}'"
                    echo 'Building the project...'
		    sh 'mvn clean'
                    sh "mvn versions:set -DnewVersion=${BUILD_VERSION}"
		    sh 'mvn install'
                }
            }
        }
        
        stage('Sonar') {
            steps {
                script {
                    echo 'Running Sonar analysis...'
                    withSonarQubeEnv(credentialsId: 'sonarqube') {
                        sh 'mvn sonar:sonar -Dsonar.projectName=test -Dsonar.projectKey=test'
                    }
                }
            }
        }
        
        stage('Uploading to JFrog Artifactory') {
            steps {
                echo 'Uploading artifacts to JFrog Artifactory...'
                rtUpload(
                    serverId: 'jfrog',
                    spec: '''{
                        "files":[{
                            "pattern": "module-a/target/*.jar",
                            "target": "Test-Repo"
                        }]
                    }''',
                )
            }
        }
        
        stage('Archiving the Artifact') {
            steps {
                echo 'Archiving the artifact...'
                archiveArtifacts artifacts: 'module-a/target/*.jar', followSymlinks: false
            }
        }
    }
}
